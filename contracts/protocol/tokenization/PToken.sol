// SPDX-License-Identifier: agpl-3.0
pragma solidity 0.6.12;

import {SafeMath} from '../../dependencies/openzeppelin/contracts/SafeMath.sol';
import {IERC20} from '../../dependencies/openzeppelin/contracts/IERC20.sol';
import {SafeERC20} from '../../dependencies/openzeppelin/contracts/SafeERC20.sol';
import {ILendingPool} from '../../interfaces/ILendingPool.sol';
import {IPToken} from '../../interfaces/IPToken.sol';
import {WadRayMath} from '../libraries/math/WadRayMath.sol';
import {Errors} from '../libraries/helpers/Errors.sol';
import {VersionedInitializable} from '../libraries/aave-upgradeability/VersionedInitializable.sol';
import {IncentivizedERC20} from './IncentivizedERC20.sol';
import {IAaveIncentivesController} from '../../interfaces/IAaveIncentivesController.sol';

/**
 * @title Aave ERC20 AToken
 * @dev Implementation of the interest bearing token for the Aave protocol
 * @author Aave
 */
contract PToken is
  VersionedInitializable,
  IncentivizedERC20('PTOKEN_IMPL', 'PTOKEN_IMPL', 0),
  IPToken
{
  using WadRayMath for uint256;
  using SafeERC20 for IERC20;
  using SafeMath for uint256;

  uint256 public constant PTOKEN_REVISION = 0x1;

  /// @dev owner => next valid nonce to submit with permit()
  mapping(address => uint256) public _nonces;

  ILendingPool internal _pool;
  address internal _project;
  // aToken address
  address internal _underlyingAsset;
  IAaveIncentivesController internal _incentivesController;

  modifier onlyLendingPool {
    require(_msgSender() == address(_pool), Errors.CT_CALLER_MUST_BE_LENDING_POOL);
    _;
  }

  modifier onlyAToken {
    require(_msgSender() == address(_underlyingAsset), Errors.AT_CALLER_MUST_BE_ATOKEN);
    _;
  }

  function getRevision() internal pure virtual override returns (uint256) {
    return PTOKEN_REVISION;
  }

  /**
   * @dev Initializes the pToken
   * @param pool The address of the lending pool where this pToken will be used
   * treasury The address of the Aave treasury,
   * @param project The address of the proyect contrat associated to the reserve
   * @param incentivesController The smart contract managing potential incentives distribution
   * @param pTokenDecimals The decimals of the pToken, same as the underlying asset's
   * @param pTokenName The name of the pToken
   * @param pTokenSymbol The symbol of the pToken
   */
  function initialize(
    ILendingPool pool,
    address underlyingAsset,
    address project,
    IAaveIncentivesController incentivesController,
    uint8 pTokenDecimals,
    string calldata pTokenName,
    string calldata pTokenSymbol,
    bytes calldata params
  ) external override initializer {
    uint256 chainId;

    //solium-disable-next-line
    assembly {
      chainId := chainid()
    }

    _setName(pTokenName);
    _setSymbol(pTokenSymbol);
    _setDecimals(pTokenDecimals);

    _pool = pool;
    _project = project;
    _underlyingAsset = underlyingAsset;
    _incentivesController = incentivesController;

    emit Initialized(
      _underlyingAsset,
      address(_pool),
      address(0x2e55589e69Adf04f89eA0E86EFB8734FC29d6e46),
      address(incentivesController),
      pTokenDecimals,
      pTokenName,
      pTokenSymbol,
      params
    );
  }

  /**
   * @dev Burns pTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`
   * - Only callable by the onlyAToken, as extra state updates there need to be managed
   * @param user The owner of the pTokens, getting them burned
   * @param amount The amount being burned
   **/
  function burn(
    address user,
    uint256 amount
  ) external override onlyAToken {

    require(amount != 0, Errors.CT_INVALID_BURN_AMOUNT);
    _burn(user, amount);

    emit Burn(user, amount);
  }

  /**
   * @dev Mints `amount` pTokens to `user`
   * - Only callable by the onlyAToken, as extra state updates there need to be managed
   * @param user The address receiving the minted tokens
   * @param amount The amount of tokens getting minted
   * @return `true` if the the previous balance of the user was 0
   */
  function mint(
    address user,
    uint256 amount
  ) external override onlyAToken returns (bool) {
    uint256 previousBalance = super.balanceOf(user);

    require(amount != 0, Errors.CT_INVALID_MINT_AMOUNT);
    _mint(user, amount);

    emit Transfer(address(0), user, amount);
    emit Mint(user, amount);

    return previousBalance == 0;
  }

  /**
   * @dev Calculates the balance of the user: principal balance + interest generated by the principal
   * @param user The user whose balance is calculated
   * @return The balance of the user
   **/
  function balanceOf(address user)
    public
    view
    override(IncentivizedERC20, IERC20)
    returns (uint256)
  {
    return super.balanceOf(user);
  }

  /**
   * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the
   * updated stored balance divided by the reserve's liquidity index at the moment of the update
   * @param user The user whose balance is calculated
   * @return The scaled balance of the user
   **/
  function scaledBalanceOf(address user) external view override returns (uint256) {
    return super.balanceOf(user);
  }

  /**
   * @dev Returns the scaled balance of the user and the scaled total supply.
   * @param user The address of the user
   * @return The scaled balance of the user
   * @return The scaled balance and the scaled total supply
   **/
  function getScaledUserBalanceAndSupply(address user)
    external
    view
    override
    returns (uint256, uint256)
  {
    return (super.balanceOf(user), super.totalSupply());
  }

  /**
   * @dev calculates the total supply of the specific pToken
   * since the balance of every single user increases over time, the total supply
   * does that too.
   * @return the current total supply
   **/
  function totalSupply() public view override(IncentivizedERC20, IERC20) returns (uint256) {

    return super.totalSupply();
  }

  /**
   * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)
   * @return the scaled total supply
   **/
  function scaledTotalSupply() public view virtual override returns (uint256) {
    return super.totalSupply();
  }

  /**
   * @dev Returns the address of the lending pool where this pToken is used
   **/
  function POOL() public view returns (ILendingPool) {
    return _pool;
  }

  /**
   * @dev For internal usage in the logic of the parent contract IncentivizedERC20
   **/
  function _getIncentivesController() internal view override returns (IAaveIncentivesController) {
    return _incentivesController;
  }

  /**
   * @dev Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)
   **/
  function UNDERLYING_ASSET_ADDRESS() public override view returns (address) {
    return _underlyingAsset;
  }
}
